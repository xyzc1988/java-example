<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!-- 全局setting配置 -->
    <settings>
        <!-- 该配置影响的所有映射器中配置的缓存的全局开关.默认值true -->
        <setting name="cacheEnabled" value="true"/>
        <!-- 延迟加载的全局开关.当开启时,所有关联对象都会延迟加载.特定关联关系中可通过设置fetchType属性来覆盖该项的开关状态.默认值false  -->
        <setting name="lazyLoadingEnabled" value="true"/>
        <!-- 是否允许单一语句返回多结果集(需要兼容驱动),默认值true -->
        <setting name="multipleResultSetsEnabled" value="true"/>
        <!-- 使用列标签代替列名.不同的驱动在这方面会有不同的表现,具体可参考相关驱动文档或通过测试这两种不同的模式来观察所用驱动的结果.默认值true -->
        <setting name="useColumnLabel" value="true"/>
        <!--  配置默认的执行器.SIMPLE 就是普通的执行器;REUSE 执行器会重用预处理语句(prepared statements); BATCH 执行器将重用语句并执行批量更新.默认SIMPLE  -->
        <setting name="defaultExecutorType" value="REUSE"/>
        <!-- 设置超时时间,它决定驱动等待数据库响应的秒数. -->
        <setting name="defaultStatementTimeout" value="25000"/>
        <!-- 指定 MyBatis 所用日志的具体实现,未指定时将自动查找.-->
        <setting name="logImpl" value="SLF4J"/>
        <!-- 是否开启自动驼峰命名规则(camel case)映射,即从经典数据库列名 A_COLUMN 到经典 Java 属性名 aColumn 的类似映射.  默认false -->
        <setting name="mapUnderscoreToCamelCase" value="false"/>
    </settings>
    <!-- 开发调试SQL性能插件 -->
    <!-- <plugins> <plugin interceptor="cn.com.nistone.mybatis.interceptor.PerformanceInterceptor"></plugin>
        </plugins> -->

    <!-- 配置别名 -->
    <typeAliases>
        <!-- 第一种 通过package, 可以直接指定package的名字, mybatis会自动扫描你指定包下面的javabean, 并且默认设置一个别名,
        默认的名字为：javabean 的首字母小写的非限定类名来作为它的别名 -->
        <package name="io.github.xyzc1988.model"/>
        <!-- 第二种 type指的是javabean的完全限定名   alias就是指代别名
        <typeAlias alias="user" type="io.github.xyzc1988.model.User" />-->
        <!-- 第三种：通过注解的方式@Alias -->
    </typeAliases>

    <!--
        配置mapper
        MapperFactoryBean默认查找mapper接口文件同目录同名称的sql映射文件,
        遵循该命名规则,<mappers>标签不需配置
    -->
    <mappers>
        <!-- 第一种方式：通过resource指定 -->
        <mapper resource="io/github/xyzc1988/mapper/UserMapper.xml"/>

        <!-- 第二种方式, 通过class指定接口,进而将接口与对应的xml文件形成映射关系
                不过,使用这种方式必须保证 接口与mapper文件同名(不区分大小写),
                我这儿接口是UserDao,那么意味着mapper文件为UserDao.xml
        <mapper class="com.dy.dao.UserDao"/>
         -->

        <!-- 第三种方式,直接指定包,自动扫描,与方法二同理
        <package name="com.dy.dao"/>
        -->
        <!-- 第四种方式：通过url指定mapper文件位置
        <mapper url="file://........"/>
         -->
    </mappers>
</configuration>